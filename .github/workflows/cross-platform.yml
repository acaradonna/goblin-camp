name: 🌍 Cross-Platform Testing

on:
  push:
    branches: [ main ]
    paths:
      - 'crates/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'crates/**/Cargo.toml'
      - '.github/workflows/cross-platform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'crates/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'crates/**/Cargo.toml'
  # Run weekly to catch platform-specific regressions
  schedule:
    - cron: '0 4 * * 1'  # Monday at 4 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  cross-platform-test:
    name: 🧪 Test ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust: stable
            features: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust: stable
            features: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            rust: stable
            features: ""
          # Add additional targets for comprehensive testing
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust: beta
            features: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust: nightly
            features: ""
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps-${{ matrix.os }}"
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.target }}

      - name: Build project
        run: |
          echo "🔨 Building for ${{ matrix.target }}..."
          cargo build --target ${{ matrix.target }} --verbose
          echo "✅ Build completed successfully"

      - name: Run tests
        run: |
          echo "🧪 Running tests on ${{ matrix.os }}..."
          cargo test --target ${{ matrix.target }} --workspace
          echo "✅ Tests completed successfully"

      - name: Test determinism (crucial for game simulation)
        run: |
          echo "🎲 Testing determinism on ${{ matrix.os }}..."
          
          # Run determinism tests multiple times to catch platform-specific issues
          for i in {1..3}; do
            echo "🔄 Determinism test run $i/3..."
            cargo test --target ${{ matrix.target }} --package gc_core --test determinism_tests
          done
          
          echo "✅ Determinism verified across multiple runs"

      - name: Platform-specific demo validation
        shell: bash
        run: |
          echo "🎮 Testing demos on ${{ matrix.os }}..."
          
          # Test core demos - avoid timeout commands that don't work on all platforms
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows-specific demo testing (use PowerShell timeout approach)
            echo "Testing on Windows..."
            powershell -Command "Start-Process -FilePath 'cargo' -ArgumentList 'run', '-p', 'gc_cli', '--target', '${{ matrix.target }}', '--', '--width', '20', '--height', '10', 'mapgen' -Wait -NoNewWindow" || echo "Demo completed or failed"
            powershell -Command "Start-Process -FilePath 'cargo' -ArgumentList 'run', '-p', 'gc_cli', '--target', '${{ matrix.target }}', '--', 'save-load' -Wait -NoNewWindow" || echo "Demo completed or failed"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS-specific demo testing (use built-in timeout if available, otherwise just run)
            echo "Testing on macOS..."
            if command -v timeout >/dev/null 2>&1; then
              timeout 30 cargo run -p gc_cli --target ${{ matrix.target }} -- --width 20 --height 10 mapgen || echo "Demo completed or timed out"
              timeout 30 cargo run -p gc_cli --target ${{ matrix.target }} -- save-load || echo "Demo completed or timed out"
            else
              # No timeout available, just run the demos
              cargo run -p gc_cli --target ${{ matrix.target }} -- --width 20 --height 10 mapgen || echo "Demo completed"
              cargo run -p gc_cli --target ${{ matrix.target }} -- save-load || echo "Demo completed"
            fi
          else
            # Linux demo testing
            echo "Testing on Linux..."
            timeout 30 cargo run -p gc_cli --target ${{ matrix.target }} -- --width 20 --height 10 mapgen || echo "Demo completed or timed out"
            timeout 30 cargo run -p gc_cli --target ${{ matrix.target }} -- save-load || echo "Demo completed or timed out"
          fi
          
          echo "✅ Platform-specific demos validated"

      - name: Test save/load compatibility
        run: |
          echo "💾 Testing save/load compatibility on ${{ matrix.os }}..."
          
          # Generate a save file and verify it loads correctly
          # This is crucial for cross-platform game compatibility
          cargo run -p gc_cli --target ${{ matrix.target }} -- save-load
          
          echo "✅ Save/load compatibility verified"

  cross-compilation:
    name: 🔗 Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - wasm32-unknown-unknown
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps-cross"
          key: cross-${{ matrix.target }}

      - name: Install cross-compilation tools
        run: |
          echo "🔧 Installing cross-compilation tools for ${{ matrix.target }}..."
          
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-musl)
              sudo apt-get update
              sudo apt-get install -y musl-tools
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
            wasm32-unknown-unknown)
              # No additional tools needed for WASM
              echo "WASM target ready"
              ;;
          esac
          
          echo "✅ Cross-compilation tools installed"

      - name: Build for target
        run: |
          echo "🔨 Cross-compiling for ${{ matrix.target }}..."
          
          # Configure cross-compilation environment
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu)
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
              ;;
          esac
          
          if [[ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]]; then
            # For WASM, only build the core library
            cargo build --target ${{ matrix.target }} --package gc_core --verbose
          else
            # For other targets, build everything
            cargo build --target ${{ matrix.target }} --verbose
          fi
          
          echo "✅ Cross-compilation successful for ${{ matrix.target }}"

  minimum-rust-version:
    name: 🦀 MSRV Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine MSRV
        id: msrv
        run: |
          # Extract MSRV from Cargo.toml if specified, otherwise use 1.81.0 as default
          msrv=$(grep "rust-version" Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/' || echo "1.81.0")
          echo "msrv=$msrv" >> $GITHUB_OUTPUT
          echo "📌 Minimum Supported Rust Version: $msrv"

      - name: Setup MSRV Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps-msrv"

      - name: Test with MSRV
        run: |
          echo "🧪 Testing with MSRV ${{ steps.msrv.outputs.msrv }}..."
          cargo build --verbose
          cargo test --workspace
          echo "✅ MSRV compatibility verified"

  endianness-test:
    name: 🔄 Endianness Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Test save format endianness
        run: |
          echo "🔄 Testing save format endianness compatibility..."
          
          # Run save/load tests to ensure binary compatibility
          # This is crucial for games that need cross-platform save files
          cargo test --package gc_core save_load_roundtrip
          
          echo "✅ Save format endianness compatibility verified"

      - name: Test determinism across byte orders
        run: |
          echo "🎲 Testing determinism across different data representations..."
          
          # Run determinism tests which should pass regardless of endianness
          cargo test --package gc_core --test determinism_tests
          
          echo "✅ Determinism verified across byte order variations"

  summary:
    name: 🌍 Cross-Platform Summary
    runs-on: ubuntu-latest
    needs: [cross-platform-test, cross-compilation, minimum-rust-version, endianness-test]
    if: always()
    
    steps:
      - name: Cross-Platform Status Summary
        run: |
          echo "## 🌍 Cross-Platform Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check results from matrix jobs
          platform_test_result="${{ needs.cross-platform-test.result }}"
          cross_compile_result="${{ needs.cross-compilation.result }}"
          msrv_result="${{ needs.minimum-rust-version.result }}"
          endian_result="${{ needs.endianness-test.result }}"
          
          all_success=true
          
          echo "| Platform Test | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$platform_test_result" == "success" ]]; then
            echo "| 🧪 Platform Testing | ✅ Passed | Linux, Windows, macOS verified |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 Platform Testing | ❌ Failed | Platform compatibility issues |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$cross_compile_result" == "success" ]]; then
            echo "| 🔗 Cross Compilation | ✅ Passed | MUSL, ARM64, WASM targets |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔗 Cross Compilation | ❌ Failed | Cross-compilation issues |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$msrv_result" == "success" ]]; then
            echo "| 🦀 MSRV Compatibility | ✅ Passed | Minimum Rust version OK |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🦀 MSRV Compatibility | ❌ Failed | MSRV requirement issues |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$endian_result" == "success" ]]; then
            echo "| 🔄 Endianness Testing | ✅ Passed | Save format compatibility |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔄 Endianness Testing | ❌ Failed | Binary compatibility issues |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$all_success" == "true" ]]; then
            echo "🌍 **All cross-platform tests passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Verified Compatibility" >> $GITHUB_STEP_SUMMARY
            echo "- **Operating Systems**: Linux, Windows, macOS" >> $GITHUB_STEP_SUMMARY
            echo "- **Architectures**: x86_64, ARM64" >> $GITHUB_STEP_SUMMARY
            echo "- **Rust Versions**: Stable, Beta, Nightly, MSRV" >> $GITHUB_STEP_SUMMARY
            echo "- **Save Format**: Cross-platform binary compatibility" >> $GITHUB_STEP_SUMMARY
            echo "- **Determinism**: Consistent across all platforms" >> $GITHUB_STEP_SUMMARY
            echo "- **Special Targets**: MUSL, WASM compilation" >> $GITHUB_STEP_SUMMARY
            echo "✅ All cross-platform tests passed!"
          else
            echo "⚠️ **Some cross-platform tests failed.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the individual test results above." >> $GITHUB_STEP_SUMMARY
            echo "Cross-platform compatibility is crucial for game distribution." >> $GITHUB_STEP_SUMMARY
            echo "❌ Cross-platform tests failed. Please review the errors above."
            exit 1
          fi