name: CI - Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run format check
        run: |
          echo "🔍 Checking code formatting..."
          cargo fmt --all -- --check

      - name: Run clippy lints
        run: |
          echo "🔍 Running clippy lints..."
          cargo clippy --lib --bins -- -D warnings

      - name: Build project
        run: |
          echo "🔨 Building project..."
          cargo build --verbose

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          # Run all working test suites
          cargo test --test designation_lifecycle_tests
          cargo test --test determinism_tests  
          cargo test --test inventory_tests
          cargo test --test m0_core_tests
          cargo test --test mining_tests
          cargo test --test stockpile_tests
          cargo test --test visibility_and_cache_tests
          # Previously flaky tests are now fixed; enforce them in CI
          cargo test --test m2_job_execution_tests
          cargo test --test mining_item_haul_tests

      - name: Install coverage tools
        run: |
          echo "📊 Installing code coverage tools..."
          cargo install cargo-llvm-cov --quiet

      - name: Generate coverage report
        run: |
          echo "📊 Generating code coverage report..."
          mkdir -p target/coverage
          cargo llvm-cov --lcov --output-path target/coverage/lcov.info
          cargo llvm-cov --html --output-dir target/coverage/html
          cargo llvm-cov --summary-only

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            target/coverage/lcov.info
            target/coverage/html/
          retention-days: 30

      - name: Check coverage threshold
        run: |
          echo "📊 Checking coverage meets minimum threshold..."
          # Enforce 75% line coverage minimum, aiming for 80%
          cargo llvm-cov --fail-under-lines 75 --summary-only
          if [ $? -ne 0 ]; then
            echo "❌ Coverage below 75% threshold"
            echo "Current coverage report uploaded as artifact"
            exit 1
          fi
          echo "✅ Coverage meets minimum threshold"

      - name: Verify demo functionality
        run: |
          echo "🎮 Verifying demo functionality..."
          # Test basic map generation
          cargo run -p gc_cli -- --width 20 --height 10 mapgen
          # Test pathfinding
          cargo run -p gc_cli -- --width 30 --height 15 path
          # Test save/load
          cargo run -p gc_cli -- save-load

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
      - name: Build Status Summary
        run: |
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "✅ All checks passed! Build is ready for merge."
            echo "- Code formatting: ✅"
            echo "- Linting: ✅" 
            echo "- Build: ✅"
            echo "- Core tests: ✅"
            echo "- Code coverage: ✅ (≥75%)"
            echo "- Demo verification: ✅"
          else
            echo "❌ Build checks failed. Please review the errors above."
            exit 1
          fi