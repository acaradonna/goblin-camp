name: üöÄ Release Automation

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic version tags (v1.0.0, v2.1.3, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            version="${{ github.event.inputs.version }}"
            is_prerelease="${{ github.event.inputs.prerelease }}"
          else
            version="${GITHUB_REF#refs/tags/}"
            # Check if version contains pre-release indicators
            if [[ "$version" =~ -(alpha|beta|rc) ]]; then
              is_prerelease="true"
            else
              is_prerelease="false"
            fi
          fi
          
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "is_prerelease=$is_prerelease" >> $GITHUB_OUTPUT
          
          echo "üìã Release version: $version"
          echo "üìã Pre-release: $is_prerelease"

      - name: Validate version format
        run: |
          version="${{ steps.version.outputs.version }}"
          
          # Remove 'v' prefix if present
          version_number="${version#v}"
          
          # Validate semantic versioning format
          if [[ ! "$version_number" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
            echo "‚ùå Invalid version format: $version"
            echo "Expected semantic version format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          
          echo "‚úÖ Version format is valid: $version"

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run pre-release validation
        run: |
          echo "üîç Running comprehensive pre-release validation..."
          
          # Ensure all tests pass
          cargo test --workspace
          
          # Ensure code is properly formatted
          cargo fmt --all -- --check
          
          # Ensure no clippy warnings
          cargo clippy --workspace --all-targets --all-features -- -D warnings
          
          # Validate demos work
          timeout 30s cargo run -p gc_cli -- --width 20 --height 10 mapgen
          timeout 30s cargo run -p gc_cli -- save-load
          
          echo "‚úÖ Pre-release validation completed"

  build-release-artifacts:
    name: üî® Build ${{ matrix.target }}
    needs: validate-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            executable_suffix: ""
            archive_format: "tar.gz"
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            executable_suffix: ".exe"
            archive_format: "zip"
          - target: x86_64-apple-darwin
            os: macos-latest
            executable_suffix: ""
            archive_format: "tar.gz"
          - target: aarch64-apple-darwin
            os: macos-latest
            executable_suffix: ""
            archive_format: "tar.gz"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps-release"
          key: release-${{ matrix.target }}

      - name: Build release binary
        run: |
          echo "üî® Building release binary for ${{ matrix.target }}..."
          cargo build --release --target ${{ matrix.target }} --package gc_cli
          echo "‚úÖ Release binary built successfully"

      - name: Create release archive
        shell: bash
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          target="${{ matrix.target }}"
          suffix="${{ matrix.executable_suffix }}"
          format="${{ matrix.archive_format }}"
          
          # Create directory for release files
          release_dir="goblin-camp-$version-$target"
          mkdir -p "$release_dir"
          
          # Copy binary
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/$target/release/gc_cli$suffix" "$release_dir/goblin-camp$suffix"
          else
            cp "target/$target/release/gc_cli$suffix" "$release_dir/goblin-camp$suffix"
          fi
          
          # Copy documentation
          cp README.md "$release_dir/"
          cp CHANGELOG.md "$release_dir/" 2>/dev/null || echo "No CHANGELOG.md found"
          cp -r docs "$release_dir/" 2>/dev/null || echo "No docs directory found"
          
          # Create license file
          cat > "$release_dir/LICENSE" << 'EOF'
          MIT License OR Apache License 2.0
          
          See the repository for full license text:
          https://github.com/acaradonna/goblin-camp
          EOF
          
          # Create archive
          if [[ "$format" == "zip" ]]; then
            7z a "$release_dir.zip" "$release_dir"
            echo "archive_name=$release_dir.zip" >> $GITHUB_ENV
          else
            tar -czf "$release_dir.tar.gz" "$release_dir"
            echo "archive_name=$release_dir.tar.gz" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Release archive created: $archive_name"

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: goblin-camp-${{ needs.validate-release.outputs.version }}-${{ matrix.target }}
          path: ${{ env.archive_name }}
          retention-days: 30

  generate-changelog:
    name: üìù Generate Changelog
    needs: validate-release
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          
          echo "üìù Generating changelog for $version..."
          
          # Get the previous tag
          previous_tag=$(git tag --sort=-version:refname | grep -v "^$version$" | head -1 || echo "")
          
          if [[ -z "$previous_tag" ]]; then
            echo "No previous tag found, generating changelog from first commit"
            commit_range="$(git rev-list --max-parents=0 HEAD)..HEAD"
          else
            echo "Previous tag: $previous_tag"
            commit_range="$previous_tag..HEAD"
          fi
          
          # Generate changelog content
          changelog_content=$(cat << EOF
          ## üéÆ Goblin Camp $version
          
          **Release Date:** $(date -u '+%Y-%m-%d')
          
          ### üìã Changes in this Release
          
          EOF
          )
          
          # Add commit messages grouped by type
          echo "" >> changelog_temp.md
          echo "#### üöÄ Features" >> changelog_temp.md
          git log --pretty=format:"- %s" $commit_range | grep -i "^- \(feat\|add\|new\)" || echo "- No new features in this release" >> changelog_temp.md
          
          echo "" >> changelog_temp.md
          echo "#### üêõ Bug Fixes" >> changelog_temp.md
          git log --pretty=format:"- %s" $commit_range | grep -i "^- \(fix\|bug\)" || echo "- No bug fixes in this release" >> changelog_temp.md
          
          echo "" >> changelog_temp.md
          echo "#### üîß Improvements" >> changelog_temp.md
          git log --pretty=format:"- %s" $commit_range | grep -i "^- \(improve\|enhance\|update\|refactor\)" || echo "- No improvements in this release" >> changelog_temp.md
          
          echo "" >> changelog_temp.md
          echo "#### üìö Documentation" >> changelog_temp.md
          git log --pretty=format:"- %s" $commit_range | grep -i "^- \(doc\|readme\)" || echo "- No documentation changes in this release" >> changelog_temp.md
          
          echo "" >> changelog_temp.md
          echo "#### üèóÔ∏è Build & CI" >> changelog_temp.md
          git log --pretty=format:"- %s" $commit_range | grep -i "^- \(build\|ci\|deploy\)" || echo "- No build/CI changes in this release" >> changelog_temp.md
          
          # Add installation instructions
          cat >> changelog_temp.md << EOF
          
          ### üéØ Installation
          
          #### Pre-built Binaries
          Download the appropriate binary for your platform from the release assets below:
          - **Linux (x86_64)**: \`goblin-camp-$version-x86_64-unknown-linux-gnu.tar.gz\`
          - **Windows (x86_64)**: \`goblin-camp-$version-x86_64-pc-windows-msvc.zip\`
          - **macOS (Intel)**: \`goblin-camp-$version-x86_64-apple-darwin.tar.gz\`
          - **macOS (Apple Silicon)**: \`goblin-camp-$version-aarch64-apple-darwin.tar.gz\`
          
          #### From Source
          \`\`\`bash
          git clone https://github.com/acaradonna/goblin-camp.git
          cd goblin-camp
          git checkout $version
          cargo build --release
          \`\`\`
          
          ### üéÆ Quick Start
          
          \`\`\`bash
          # Interactive demo menu
          ./goblin-camp menu
          
          # Generate a map
          ./goblin-camp mapgen
          
          # Test pathfinding
          ./goblin-camp path
          \`\`\`
          
          ### üìä What's Included
          
          - **Core Engine**: ECS-based simulation with Bevy
          - **Map Generation**: Procedural world generation
          - **Pathfinding**: A* algorithm with caching
          - **Job System**: AI behavior and task management
          - **Save/Load**: World persistence system
          - **CLI Interface**: Command-line demos and testing
          
          ### üîó Links
          
          - **Repository**: https://github.com/acaradonna/goblin-camp
          - **Documentation**: https://acaradonna.github.io/goblin-camp
          - **Issues**: https://github.com/acaradonna/goblin-camp/issues
          EOF
          
          # Save changelog to output
          changelog_content="$changelog_content$(cat changelog_temp.md)"
          
          # Escape for GitHub Actions
          {
            echo 'changelog<<EOF'
            echo "$changelog_content"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          echo "‚úÖ Changelog generated"

  create-release:
    name: üöÄ Create GitHub Release
    needs: [validate-release, build-release-artifacts, generate-changelog]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: goblin-camp-${{ needs.validate-release.outputs.version }}-*
          path: release-artifacts
          merge-multiple: true

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: üéÆ Goblin Camp ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

      - name: Upload release assets
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          upload_url="${{ steps.create_release.outputs.upload_url }}"
          
          echo "üì¶ Uploading release assets..."
          
          for asset in release-artifacts/*; do
            if [[ -f "$asset" ]]; then
              asset_name=$(basename "$asset")
              echo "Uploading $asset_name..."
              
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$asset" \
                "${upload_url%\{*}?name=$asset_name"
            fi
          done
          
          echo "‚úÖ All release assets uploaded"

  update-documentation:
    name: üìö Update Documentation
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version references
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          version_number="${version#v}"
          
          echo "üìö Updating documentation with version $version..."
          
          # Update Cargo.toml versions
          find . -name "Cargo.toml" -type f -exec sed -i "s/^version = \".*\"/version = \"$version_number\"/" {} \;
          
          # Update README badges and references
          if [[ -f "README.md" ]]; then
            sed -i "s/\(version-\)[^-]*\(-blue\)/\1$version_number\2/g" README.md
            sed -i "s/\(releases\/tag\/v\)[^)]*)/\1$version_number)/g" README.md
          fi
          
          echo "‚úÖ Documentation updated"

      - name: Commit version updates
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "chore: bump version to $version [skip ci]"
            git push origin main
            echo "‚úÖ Version updates committed"
          fi

  notify-release:
    name: üì¢ Release Notifications
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Summary
        run: |
          version="${{ needs.validate-release.outputs.version }}"
          is_prerelease="${{ needs.validate-release.outputs.is_prerelease }}"
          
          echo "## üöÄ Release $version Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$is_prerelease" == "true" ]]; then
            echo "üß™ **This is a pre-release version**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üì¶ Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "- Linux (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (Intel & Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "- [üìã Release Page](https://github.com/acaradonna/goblin-camp/releases/tag/$version)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìö Documentation](https://acaradonna.github.io/goblin-camp)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "üéâ **Release $version is now available!**"