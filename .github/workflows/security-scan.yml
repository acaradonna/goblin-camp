name: 🔒 Security & Vulnerability Scanning

on:
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  push:
    branches: [ main ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - 'deny.toml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - 'deny.toml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo-deny:
    name: 🚫 Cargo Deny - Dependency Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Install cargo-deny
        run: |
          echo "📦 Installing cargo-deny..."
          cargo install cargo-deny --quiet

      - name: Run cargo-deny checks
        run: |
          echo "🔍 Running cargo-deny security checks..."

          # Run all deny checks
          cargo deny check

          # Generate advisory report
          cargo deny check advisories --format json > deny-advisories.json || true

      - name: Upload deny report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cargo-deny-report-${{ github.sha }}
          path: deny-advisories.json
          retention-days: 30

  cargo-audit:
    name: 🔍 Cargo Audit - Vulnerability Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: |
          echo "📦 Installing cargo-audit..."
          cargo install cargo-audit --quiet

      - name: Run cargo-audit
        run: |
          echo "🔍 Running cargo-audit vulnerability scan..."

          # Run audit with JSON output for processing
          cargo audit --format json > audit-results.json || true

          # Also run with human-readable output
          echo "## Cargo Audit Results" > audit-summary.md
          echo "" >> audit-summary.md
          echo "\`\`\`" >> audit-summary.md
          cargo audit || echo "No vulnerabilities found" >> audit-summary.md
          echo "\`\`\`" >> audit-summary.md

      - name: Process audit results
        run: |
          if [ -f audit-results.json ]; then
            # Check if there are any vulnerabilities
            vulnerabilities=$(jq '.vulnerabilities.count // 0' audit-results.json 2>/dev/null || echo "0")

            if [ "$vulnerabilities" -gt 0 ]; then
              echo "🚨 Vulnerabilities found: $vulnerabilities"
              echo "vulnerabilities_found=true" >> $GITHUB_ENV

              # Create detailed report
              echo "## 🚨 Security Vulnerabilities Detected" > security-alert.md
              echo "" >> security-alert.md
              echo "**Total vulnerabilities:** $vulnerabilities" >> security-alert.md
              echo "" >> security-alert.md

              # Extract vulnerability details
              jq -r '.vulnerabilities.list[]? | "- **\(.package.name) \(.package.version)**: \(.advisory.title) (ID: \(.advisory.id))"' audit-results.json >> security-alert.md 2>/dev/null || echo "Could not parse vulnerability details" >> security-alert.md

              echo "" >> security-alert.md
              echo "### Recommended Actions" >> security-alert.md
              echo "1. Review the vulnerabilities above" >> security-alert.md
              echo "2. Update affected dependencies to secure versions" >> security-alert.md
              echo "3. Test thoroughly after updates" >> security-alert.md
              echo "4. Consider security implications for your use case" >> security-alert.md
            else
              echo "✅ No vulnerabilities found"
              echo "vulnerabilities_found=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ Could not generate audit results"
            echo "vulnerabilities_found=false" >> $GITHUB_ENV
          fi

      - name: Upload audit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cargo-audit-report-${{ github.sha }}
          path: |
            audit-results.json
            audit-summary.md
            security-alert.md
          retention-days: 30

      - name: Create security issue for vulnerabilities
        if: env.vulnerabilities_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the security alert content
            let alertContent = '## Security Vulnerabilities Detected\n\nVulnerabilities have been found in project dependencies.';
            if (fs.existsSync('security-alert.md')) {
              alertContent = fs.readFileSync('security-alert.md', 'utf8');
            }

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Vulnerabilities Found in Dependencies',
              body: `
              ${alertContent}

              **Details:**
              - Detected on: ${new Date().toISOString()}
              - Commit: ${context.sha}
              - Workflow: ${context.workflow}

              **Next Steps:**
              1. Review the vulnerability details above
              2. Update affected dependencies to secure versions
              3. Run tests to ensure updates don't break functionality
              4. Consider the security impact on your application

              **Reports:** Check the workflow artifacts for detailed audit results.
              `,
              labels: ['security', 'vulnerability', 'dependencies', 'action-required']
            })

  codeql-analysis:
    name: 🔬 CodeQL - Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust
          config-file: ./.github/codeql-config.yml

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Build project
        run: |
          echo "🔨 Building project for CodeQL analysis..."
          cargo build --release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:rust"

  security-summary:
    name: 📋 Security Scan Summary
    runs-on: ubuntu-latest
    needs: [cargo-deny, cargo-audit, codeql-analysis]
    if: always()

    steps:
      - name: Generate security summary
        run: |
          echo "## 🔒 Security & Vulnerability Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          deny_result="${{ needs.cargo-deny.result }}"
          audit_result="${{ needs.cargo-audit.result }}"
          codeql_result="${{ needs.codeql-analysis.result }}"

          echo "| Security Check | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|-------------|" >> $GITHUB_STEP_SUMMARY

          [[ "$deny_result" == "success" ]] && echo "| 🚫 Cargo Deny | ✅ Passed | No dependency issues |" >> $GITHUB_STEP_SUMMARY || echo "| 🚫 Cargo Deny | ❌ Failed | Dependency issues found |" >> $GITHUB_STEP_SUMMARY
          [[ "$audit_result" == "success" ]] && echo "| 🔍 Cargo Audit | ✅ Passed | No vulnerabilities |" >> $GITHUB_STEP_SUMMARY || echo "| 🔍 Cargo Audit | ❌ Failed | Vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          [[ "$codeql_result" == "success" ]] && echo "| 🔬 CodeQL | ✅ Passed | No code security issues |" >> $GITHUB_STEP_SUMMARY || echo "| 🔬 CodeQL | ❌ Failed | Code security issues found |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall assessment
          if [[ "$deny_result" == "success" && "$audit_result" == "success" && "$codeql_result" == "success" ]]; then
            echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your codebase appears to be secure with no known vulnerabilities." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security issues detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔍 Issues Found" >> $GITHUB_STEP_SUMMARY

            [[ "$deny_result" != "success" ]] && echo "- **Dependency Issues**: Check cargo-deny report for licensing or security concerns" >> $GITHUB_STEP_SUMMARY
            [[ "$audit_result" != "success" ]] && echo "- **Vulnerabilities**: Review cargo-audit results for known security issues" >> $GITHUB_STEP_SUMMARY
            [[ "$codeql_result" != "success" ]] && echo "- **Code Security**: Examine CodeQL findings for potential security vulnerabilities" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the detailed reports in workflow artifacts" >> $GITHUB_STEP_SUMMARY
            echo "2. Address any critical security issues" >> $GITHUB_STEP_SUMMARY
            echo "3. Update dependencies to secure versions" >> $GITHUB_STEP_SUMMARY
            echo "4. Consider security implications for your use case" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Download and display key findings
        if: needs.cargo-audit.result == 'failure'
        run: |
          echo "### 🚨 Critical Security Findings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Try to display key vulnerability information
          if [ -f security-alert.md ]; then
            cat security-alert.md >> $GITHUB_STEP_SUMMARY
          else
            echo "_Detailed vulnerability information available in workflow artifacts._" >> $GITHUB_STEP_SUMMARY
          fi
