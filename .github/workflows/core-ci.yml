name: 🔧 Core CI - Essential Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: core-ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

# Allow read access to repository contents for checkout
permissions:
  contents: read

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust-code: ${{ steps.changes.outputs.rust-code }}
      docs: ${{ steps.changes.outputs.docs }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            rust-code:
              - 'crates/**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'crates/**/Cargo.toml'
            docs:
              - 'docs/**'
              - '*.md'
              - '.github/copilot-instructions.md'
            workflows:
              - '.github/workflows/**'

  pr-validation:
    name: 🔍 PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch enough history to validate commits
          fetch-depth: 0
          # Check out the PR head commit directly (avoid synthetic merge ref)
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Setup git configuration
        run: |
          git config --global --add safe.directory /github/workspace
          git remote add upstream ${{ github.event.repository.clone_url }}
          git fetch upstream ${{ github.base_ref }}
      
      - name: Validate PR commit messages and branch name
        run: |
          echo "🔍 Running PR validation..."
          ./scripts/validate-pr.sh --commit-range upstream/${{ github.base_ref }}..HEAD --branch-name "${{ github.head_ref }}"
          echo "✅ PR validation completed"

  format-check:
    name: 🎨 Format Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: |
          echo "🎨 Checking code formatting..."
          cargo fmt --all -- --check
          echo "✅ Code formatting is correct"

  clippy-lint:
    name: 📋 Clippy Lints
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Run clippy
        run: |
          echo "📋 Running clippy lints..."
          cargo clippy --workspace --all-targets --all-features -- -D warnings
          echo "✅ Clippy checks passed"

  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    needs: [changes, format-check, clippy-lint]
    if: |
      always() && 
      (needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.format-check.result == 'success' || needs.format-check.result == 'skipped') &&
      (needs.clippy-lint.result == 'success' || needs.clippy-lint.result == 'skipped')
    
    strategy:
      matrix:
        target: 
          - debug
          - release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"
          save-if: ${{ matrix.target == 'debug' }}

      - name: Build project (${{ matrix.target }})
        run: |
          echo "🔨 Building project in ${{ matrix.target }} mode..."
          if [ "${{ matrix.target }}" == "release" ]; then
            cargo build --release --verbose
          else
            cargo build --verbose
          fi
          echo "✅ Build completed successfully"

      - name: Upload build artifacts
        if: matrix.target == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: goblin-camp-${{ matrix.target }}-${{ github.sha }}
          path: |
            target/release/gc_cli
          retention-days: 7

  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: |
      always() && 
      (needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch') &&
      needs.build.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install fast test runner (nextest)
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          echo "Using cargo-nextest for faster execution..."
          cargo nextest run --workspace
          echo "✅ Tests completed"

      - name: Run doc tests
        run: |
          echo "📚 Running doc tests..."
          cargo test --doc --workspace
          echo "✅ Doc tests completed"

  coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: |
      always() && 
      (needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch') &&
      needs.test.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tools (llvm-cov + nextest)
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov,cargo-nextest

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Generate coverage
        run: |
          echo "📊 Generating coverage reports..."
          cargo llvm-cov nextest --lcov --output-path lcov.info --package gc_core
          cargo llvm-cov nextest --html --output-dir html-coverage --package gc_core

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.sha }}
          path: |
            lcov.info
            html-coverage/
          retention-days: 30

      - name: Check coverage threshold
        run: |
          echo "📊 Checking coverage threshold..."
          cargo llvm-cov --fail-under-lines 75 --summary-only --package gc_core
          echo "✅ Coverage meets minimum threshold (75%)"

  docs:
    name: 📚 Build Docs
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Build documentation
        run: |
          echo "📚 Building documentation..."
          cargo doc --workspace --no-deps --quiet
          echo "✅ Documentation builds successfully"

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run cargo audit
        run: |
          echo "🔍 Running cargo-audit..."
          cargo audit --deny warnings --ignore RUSTSEC-2024-0436 --color always
          echo "✅ Security audit passed"

  license-check:
    name: 🚫 License & Policy Check
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Run cargo deny
        run: |
          echo "🚫 Running cargo-deny checks..."
          cargo deny check --hide-inclusion-graph
          echo "✅ License and policy checks passed"

  demo-validation:
    name: 🎮 Demo Validation
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: |
      always() && 
      (needs.changes.outputs.rust-code == 'true' || github.event_name == 'workflow_dispatch') &&
      needs.build.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Test map generation
        run: |
          echo "🎮 Testing map generation..."
          timeout 30s cargo run -p gc_cli -- --width 20 --height 10 mapgen

      - name: Test pathfinding
        run: |
          echo "🎮 Testing pathfinding..."
          timeout 30s cargo run -p gc_cli -- --width 30 --height 15 path

      - name: Test save/load
        run: |
          echo "🎮 Testing save/load..."
          timeout 30s cargo run -p gc_cli -- save-load

      - name: Test field of view
        run: |
          echo "🎮 Testing field of view..."
          timeout 30s cargo run -p gc_cli -- fov

  summary:
    name: ✅ Core CI Summary
    runs-on: ubuntu-latest
    needs: [changes, pr-validation, format-check, clippy-lint, build, test, coverage, demo-validation, docs, security-audit, license-check]
    if: always()
    steps:
      - name: Core CI Status Summary
        run: |
          echo "## 🔧 Core CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.changes.outputs.rust-code }}" == "false" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "ℹ️ **No Rust code changes detected - Core CI skipped**" >> $GITHUB_STEP_SUMMARY
            echo "Changes detected:" >> $GITHUB_STEP_SUMMARY
            echo "- Documentation: ${{ needs.changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
            echo "- Workflows: ${{ needs.changes.outputs.workflows }}" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          # Check individual job results
          pr_validation_result="${{ needs.pr-validation.result }}"
          format_result="${{ needs.format-check.result }}"
          clippy_result="${{ needs.clippy-lint.result }}"
          build_result="${{ needs.build.result }}"
          test_result="${{ needs.test.result }}"
          coverage_result="${{ needs.coverage.result }}"
          demo_result="${{ needs.demo-validation.result }}"
          docs_result="${{ needs.docs.result }}"
          audit_result="${{ needs.security-audit.result }}"
          deny_result="${{ needs.license-check.result }}"
          
          all_success=true
          
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Only show PR validation for pull requests
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "$pr_validation_result" == "success" ]]; then
              echo "| 🔍 PR Validation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| 🔍 PR Validation | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
              all_success=false
            fi
          fi
          
          if [[ "$format_result" == "success" ]]; then
            echo "| 🎨 Code Formatting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🎨 Code Formatting | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$clippy_result" == "success" ]]; then
            echo "| 📋 Clippy Lints | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📋 Clippy Lints | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$build_result" == "success" ]]; then
            echo "| 🔨 Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔨 Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$test_result" == "success" ]]; then
            echo "| 🧪 Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$coverage_result" == "success" ]]; then
            echo "| 📊 Coverage | ✅ Passed | ≥75% core library |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📊 Coverage | ❌ Failed | ≥75% core library |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          if [[ "$demo_result" == "success" ]]; then
            echo "| 🎮 Demo Validation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🎮 Demo Validation | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi

          if [[ "$docs_result" == "success" ]]; then
            echo "| 📚 Docs Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📚 Docs Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi

          if [[ "$audit_result" == "success" ]]; then
            echo "| 🔒 Security Audit | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔒 Security Audit | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi

          if [[ "$deny_result" == "success" ]]; then
            echo "| 🚫 License/Policy | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🚫 License/Policy | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            all_success=false
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$all_success" == "true" ]]; then
            echo "🎉 **All core checks passed!** The code is ready for merge." >> $GITHUB_STEP_SUMMARY
            echo "✅ All checks passed! Build is ready for merge."
          else
            echo "❌ **Some checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
            echo "❌ Build checks failed. Please review the errors above."
            exit 1
          fi