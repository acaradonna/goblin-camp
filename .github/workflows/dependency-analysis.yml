name: 📦 Dependency Analysis & Management

on:
  schedule:
    # Run weekly on Mondays at 4 AM UTC
    - cron: '0 4 * * 1'
  push:
    branches: [ main ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  pull_request:
    branches: [ main ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of dependency analysis to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - outdated
          - licenses
          - sizes

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  dependency-analysis:
    name: 📊 Dependency Analysis
    runs-on: ubuntu-latest
    outputs:
      outdated-count: ${{ steps.outdated.outputs.count }}
      analysis-results: ${{ steps.analysis.outputs.results }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps"

      - name: Install dependency analysis tools
        run: |
          echo "📦 Installing dependency analysis tools..."
          cargo install cargo-outdated --quiet
          cargo install cargo-license --quiet
          cargo install cargo-tree --quiet
          cargo install cargo-geiger --quiet || echo "cargo-geiger not available"

      - name: Generate dependency tree
        run: |
          echo "🌳 Generating dependency tree..."
          mkdir -p dependency-analysis

          # Generate full dependency tree
          cargo tree > dependency-analysis/dependency-tree.txt

          # Generate dependency tree with duplicates
          cargo tree --duplicates > dependency-analysis/duplicate-deps.txt

          # Generate dependency tree by features
          cargo tree --edges features > dependency-analysis/feature-deps.txt

      - name: Check for outdated dependencies
        id: outdated
        run: |
          echo "📅 Checking for outdated dependencies..."

          # Generate outdated dependencies report
          cargo outdated --format json > dependency-analysis/outdated.json || echo '{"dependencies": []}' > dependency-analysis/outdated.json

          # Count outdated dependencies
          outdated_count=$(jq '.dependencies | length' dependency-analysis/outdated.json 2>/dev/null || echo "0")
          echo "count=$outdated_count" >> $GITHUB_OUTPUT

          # Generate human-readable report
          echo "## 📅 Outdated Dependencies Report" > dependency-analysis/outdated-report.md
          echo "" >> dependency-analysis/outdated-report.md
          echo "**Total outdated dependencies:** $outdated_count" >> dependency-analysis/outdated-report.md
          echo "" >> dependency-analysis/outdated-report.md

          if [ "$outdated_count" -gt 0 ]; then
            echo "| Package | Current | Latest | Kind |" >> dependency-analysis/outdated-report.md
            echo "|---------|---------|--------|------|" >> dependency-analysis/outdated-report.md

            jq -r '.dependencies[]? | "| \(.name) | \(.project) | \(.latest) | \(.kind) |"' dependency-analysis/outdated.json >> dependency-analysis/outdated-report.md 2>/dev/null || echo "| Error parsing | - | - | - |" >> dependency-analysis/outdated-report.md
          else
            echo "✅ All dependencies are up to date!" >> dependency-analysis/outdated-report.md
          fi

      - name: Analyze dependency licenses
        run: |
          echo "📋 Analyzing dependency licenses..."

          # Generate license report
          cargo license > dependency-analysis/licenses.txt || echo "License analysis failed" > dependency-analysis/licenses.txt

          # Generate license summary
          echo "## 📋 License Analysis" > dependency-analysis/license-summary.md
          echo "" >> dependency-analysis/license-summary.md

          if [ -s dependency-analysis/licenses.txt ]; then
            echo "\`\`\`" >> dependency-analysis/license-summary.md
            head -20 dependency-analysis/licenses.txt >> dependency-analysis/license-summary.md
            echo "\`\`\`" >> dependency-analysis/license-summary.md

            if grep -i "unknown\|missing" dependency-analysis/licenses.txt > /dev/null; then
              echo "⚠️ **Warning:** Some dependencies have unknown or missing license information." >> dependency-analysis/license-summary.md
            fi
          else
            echo "⚠️ License analysis could not be completed." >> dependency-analysis/license-summary.md
          fi

      - name: Analyze dependency sizes
        run: |
          echo "📏 Analyzing dependency sizes..."

          # Build with release optimizations
          cargo build --release --quiet

          # Generate size report (if available)
          if command -v cargo-bloat >/dev/null 2>&1; then
            echo "Installing cargo-bloat..."
            cargo install cargo-bloat --quiet
            cargo bloat --release --crates > dependency-analysis/crate-sizes.txt || echo "Crate size analysis failed" > dependency-analysis/crate-sizes.txt
          else
            echo "cargo-bloat not available, skipping size analysis" > dependency-analysis/crate-sizes.txt
          fi

      - name: Security audit of dependencies
        run: |
          echo "🔒 Running security audit..."

          # Install cargo-audit if not available
          if ! command -v cargo-audit >/dev/null 2>&1; then
            cargo install cargo-audit --quiet
          fi

          # Run audit
          cargo audit --format json > dependency-analysis/security-audit.json || echo '{"vulnerabilities": {"count": 0}}' > dependency-analysis/security-audit.json

          # Generate security summary
          vuln_count=$(jq '.vulnerabilities.count // 0' dependency-analysis/security-audit.json 2>/dev/null || echo "0")

          echo "## 🔒 Security Audit Results" > dependency-analysis/security-summary.md
          echo "" >> dependency-analysis/security-summary.md
          echo "**Vulnerabilities found:** $vuln_count" >> dependency-analysis/security-summary.md

          if [ "$vuln_count" -gt 0 ]; then
            echo "" >> dependency-analysis/security-summary.md
            echo "### 🚨 Vulnerabilities" >> dependency-analysis/security-summary.md
            jq -r '.vulnerabilities.list[]? | "- **\(.package.name)**: \(.advisory.title)"' dependency-analysis/security-audit.json >> dependency-analysis/security-summary.md 2>/dev/null || echo "- Could not parse vulnerability details" >> dependency-analysis/security-summary.md
          else
            echo "" >> dependency-analysis/security-summary.md
            echo "✅ No known security vulnerabilities found in dependencies." >> dependency-analysis/security-summary.md
          fi

      - name: Generate comprehensive analysis report
        id: analysis
        run: |
          echo "📊 Generating comprehensive analysis report..."

          # Create main analysis report
          cat > dependency-analysis/analysis-report.md << 'EOF'
          # 📦 Dependency Analysis Report

          **Generated:** $(date)
          **Commit:** $(git rev-parse HEAD)
          **Branch:** $(git branch --show-current)

          ## Executive Summary

          This report provides a comprehensive analysis of the project's dependencies, including outdated packages, license information, security vulnerabilities, and size analysis.

          ## Analysis Results
          EOF

          # Add outdated dependencies section
          if [ -f dependency-analysis/outdated-report.md ]; then
            cat dependency-analysis/outdated-report.md >> dependency-analysis/analysis-report.md
            echo "" >> dependency-analysis/analysis-report.md
          fi

          # Add license analysis section
          if [ -f dependency-analysis/license-summary.md ]; then
            cat dependency-analysis/license-summary.md >> dependency-analysis/analysis-report.md
            echo "" >> dependency-analysis/analysis-report.md
          fi

          # Add security audit section
          if [ -f dependency-analysis/security-summary.md ]; then
            cat dependency-analysis/security-summary.md >> dependency-analysis/analysis-report.md
            echo "" >> dependency-analysis/analysis-report.md
          fi

          # Add recommendations
          cat >> dependency-analysis/analysis-report.md << 'EOF'
          ## Recommendations

          ### Dependency Updates
          - Review outdated dependencies and update where appropriate
          - Test thoroughly after updates to ensure compatibility
          - Consider the impact of major version updates

          ### Security
          - Address any security vulnerabilities found
          - Keep dependencies updated to receive security patches
          - Consider using tools like `cargo-audit` regularly

          ### Licensing
          - Ensure all dependencies have acceptable licenses
          - Document any licensing concerns for legal review
          - Consider license compatibility between dependencies

          ### Performance
          - Monitor dependency sizes and their impact on build times
          - Consider removing unused dependencies
          - Evaluate the necessity of large dependencies

          ## Next Steps

          1. Review the detailed findings above
          2. Prioritize updates based on security and functionality needs
          3. Test updates in a development environment first
          4. Update this analysis regularly (recommended: weekly)

          ---
          *This report was generated automatically by the Dependency Analysis workflow.*
          EOF

          # Set output for other jobs
          echo "results<<EOF" >> $GITHUB_OUTPUT
          cat dependency-analysis/analysis-report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-${{ github.sha }}
          path: dependency-analysis/
          retention-days: 90

  dependency-alert:
    name: 🚨 Dependency Alert
    runs-on: ubuntu-latest
    needs: dependency-analysis
    if: |
      always() &&
      (needs.dependency-analysis.outputs.outdated-count > 10 ||
       needs.dependency-analysis.result == 'failure')

    steps:
      - name: Create dependency alert
        run: |
          outdated_count="${{ needs.dependency-analysis.outputs.outdated-count }}"

          echo "🚨 Dependency issues detected!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Dependency Issues Found" >> $GITHUB_STEP_SUMMARY

          if [ "$outdated_count" -gt 10 ]; then
            echo "- **High number of outdated dependencies:** $outdated_count found" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.dependency-analysis.result }}" != "success" ]]; then
            echo "- **Analysis failed:** Dependency analysis encountered errors" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Review the dependency analysis artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Consider updating outdated dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Address any security vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub issue for dependency issues
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const outdatedCount = ${{ needs.dependency-analysis.outputs.outdated-count }};

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📦 Dependency Maintenance Required',
              body: `
              ## Dependency Maintenance Alert

              The automated dependency analysis has detected maintenance needs.

              **Issues Found:**
              - Outdated dependencies: ${outdatedCount}
              ${outdatedCount > 10 ? '- **High priority:** Many dependencies are outdated' : ''}

              **Details:**
              - Detected on: ${new Date().toISOString()}
              - Commit: ${context.sha}
              - Workflow: ${context.workflow}

              **Recommended Actions:**
              1. Review the dependency analysis artifacts
              2. Update critical dependencies to latest compatible versions
              3. Test thoroughly after updates
              4. Consider security implications of updates
              5. Update dependency analysis baseline

              **Artifacts:** Check the workflow run for detailed analysis results.
              `,
              labels: ['dependencies', 'maintenance', 'enhancement']
            })

  dependency-summary:
    name: 📋 Dependency Analysis Summary
    runs-on: ubuntu-latest
    needs: [dependency-analysis, dependency-alert]
    if: always()

    steps:
      - name: Generate dependency summary
        run: |
          echo "## 📦 Dependency Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          analysis_result="${{ needs.dependency-analysis.result }}"
          alert_result="${{ needs.dependency-alert.result }}"
          outdated_count="${{ needs.dependency-analysis.outputs.outdated-count }}"

          echo "| Analysis Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          [[ "$analysis_result" == "success" ]] && echo "| 📊 Analysis | ✅ Completed | Dependencies analyzed |" >> $GITHUB_STEP_SUMMARY || echo "| 📊 Analysis | ❌ Failed | Analysis encountered errors |" >> $GITHUB_STEP_SUMMARY
          [[ "$alert_result" == "success" ]] && echo "| 🚨 Alert | ✅ Generated | Issues flagged |" >> $GITHUB_STEP_SUMMARY || echo "| 🚨 Alert | ⚠️ Skipped | No critical issues |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$analysis_result" == "success" ]]; then
            echo "✅ **Dependency analysis completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Analysis Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Outdated dependencies:** $outdated_count" >> $GITHUB_STEP_SUMMARY
            echo "- **Analysis artifacts:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- **Security audit:** Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **License analysis:** Completed" >> $GITHUB_STEP_SUMMARY

            if [ "$outdated_count" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**💡 Tip:** Consider updating outdated dependencies to get latest features and security fixes." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Dependency analysis encountered issues**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the analysis execution logs for details." >> $GITHUB_STEP_SUMMARY
          fi
