name: 🚀 Release Management & Automation

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release to create'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create a pre-release'
        required: false
        default: false
        type: boolean
      custom_version:
        description: 'Custom version (leave empty for auto-increment)'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_notes: ${{ steps.changelog.outputs.release_notes }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install release tools
        run: |
          echo "📦 Installing release management tools..."
          cargo install cargo-release --quiet || echo "cargo-release not available"
          cargo install git-cliff --quiet || echo "git-cliff not available"

      - name: Determine version bump
        id: version
        run: |
          # Get current version from Cargo.toml
          current_version=$(grep '^version =' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')

          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            new_version="${{ github.event.inputs.custom_version }}"
          else
            release_type="${{ github.event.inputs.release_type }}"
            prerelease="${{ github.event.inputs.prerelease }}"

            # Parse current version
            IFS='.' read -r major minor patch <<< "$current_version"

            case $release_type in
              "major")
                new_version="$((major + 1)).0.0"
                ;;
              "minor")
                new_version="$major.$((minor + 1)).0"
                ;;
              "patch")
                new_version="$major.$minor.$((patch + 1))"
                ;;
              *)
                new_version="$current_version"
                ;;
            esac

            # Add pre-release suffix if requested
            if [ "$prerelease" = "true" ]; then
              timestamp=$(date +%Y%m%d%H%M%S)
              new_version="$new_version-alpha.$timestamp"
            fi
          fi

          echo "Current version: $current_version"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "is_prerelease=$prerelease" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."

          # Create changelog using git-cliff if available
          if command -v git-cliff >/dev/null 2>&1; then
            git-cliff --latest --strip header > changelog-latest.md
          else
            # Fallback: Generate basic changelog from recent commits
            echo "# Changelog - v${{ steps.version.outputs.new_version }}" > changelog-latest.md
            echo "" >> changelog-latest.md
            echo "## Changes" >> changelog-latest.md
            echo "" >> changelog-latest.md

            # Get recent commits since last tag
            git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD >> changelog-latest.md 2>/dev/null || echo "- Release preparation" >> changelog-latest.md
          fi

          # Add version information
          sed -i "1s/.*/# Changelog - v${{ steps.version.outputs.new_version }}/" changelog-latest.md

          # Add release metadata
          echo "" >> changelog-latest.md
          echo "---" >> changelog-latest.md
          echo "" >> changelog-latest.md
          echo "**Release Information:**" >> changelog-latest.md
          echo "- Version: v${{ steps.version.outputs.new_version }}" >> changelog-latest.md
          echo "- Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> changelog-latest.md
          echo "- Commit: $(git rev-parse HEAD)" >> changelog-latest.md

          # Set output
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat changelog-latest.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update version in Cargo.toml files
        run: |
          echo "🔄 Updating version in Cargo.toml files..."

          # Update workspace Cargo.toml
          sed -i "s/^version = \".*\"/version = \"${{ steps.version.outputs.new_version }}\"/" Cargo.toml

          # Update crate Cargo.toml files
          find crates -name "Cargo.toml" -exec sed -i "s/^version = \".*\"/version = \"${{ steps.version.outputs.new_version }}\"/" {} \;

          # Update workspace dependencies
          for crate in crates/*/; do
            if [ -f "$crate/Cargo.toml" ]; then
              crate_name=$(basename "$crate")
              sed -i "s/$crate_name = { version = \".*\"/$crate_name = { version = \"${{ steps.version.outputs.new_version }}\"/" Cargo.toml
            fi
          done

      - name: Build and test release
        run: |
          echo "🔨 Building and testing release version..."

          # Clean and build
          cargo clean
          cargo build --release

          # Run tests
          cargo test --release

          # Run clippy
          cargo clippy --release -- -D warnings

      - name: Create release commit
        run: |
          echo "📝 Creating release commit..."

          git add Cargo.toml crates/*/Cargo.toml
          git commit -m "chore: release v${{ steps.version.outputs.new_version }}"

          # Create and push tag
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.version.outputs.new_version }}
          path: |
            changelog-latest.md
            Cargo.toml
            crates/*/Cargo.toml
          retention-days: 30

  create-github-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.prepare-release.outputs.new_version }}
          path: release-artifacts/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          release_name: Release v${{ needs.prepare-release.outputs.new_version }}
          body: ${{ needs.prepare-release.outputs.release_notes }}
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}

  build-release-artifacts:
    name: 🔨 Build Release Artifacts
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: "rust-deps-${{ matrix.target }}"

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary
        run: |
          echo "🔨 Building for ${{ matrix.target }}..."

          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Cross-compilation for ARM64
            rustup target add ${{ matrix.target }}
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Package release artifacts
        run: |
          echo "📦 Packaging release artifacts..."

          version="${{ needs.prepare-release.outputs.new_version }}"
          target="${{ matrix.target }}"

          # Create artifact directory
          mkdir -p release-package

          # Copy binary
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${target}/release/gc_cli.exe" "release-package/"
            cp "target/${target}/release/gc_tui.exe" "release-package/" 2>/dev/null || true
          else
            cp "target/${target}/release/gc_cli" "release-package/"
            cp "target/${target}/release/gc_tui" "release-package/" 2>/dev/null || true
          fi

          # Copy documentation
          cp README.md release-package/
          cp CHANGELOG.md release-package/ 2>/dev/null || true

          # Create archive
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "goblin-camp-${version}-${target}.zip" ./release-package/*
          else
            tar -czf "goblin-camp-${version}-${target}.tar.gz" -C release-package .
          fi

      - name: Upload release binaries
        uses: actions/upload-artifact@v4
        with:
          name: goblin-camp-${{ needs.prepare-release.outputs.new_version }}-${{ matrix.target }}
          path: goblin-camp-${{ needs.prepare-release.outputs.new_version }}-${{ matrix.target }}.*
          retention-days: 30

  update-changelog:
    name: 📝 Update Changelog
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.prepare-release.outputs.new_version }}
          path: changelog-artifacts/

      - name: Update CHANGELOG.md
        run: |
          echo "📝 Updating CHANGELOG.md..."

          # Backup existing changelog
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md CHANGELOG.md.backup
          fi

          # Prepend new changelog entry
          if [ -f changelog-artifacts/changelog-latest.md ]; then
            cat changelog-artifacts/changelog-latest.md > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "<!-- Previous entries below -->" >> CHANGELOG.md
            echo "" >> CHANGELOG.md

            if [ -f CHANGELOG.md.backup ]; then
              cat CHANGELOG.md.backup >> CHANGELOG.md
            fi
          fi

      - name: Commit changelog update
        run: |
          if [ -f changelog-artifacts/changelog-latest.md ]; then
            git add CHANGELOG.md
            git commit -m "docs: update changelog for v${{ needs.prepare-release.outputs.new_version }}"
            git push origin main
          fi

  release-summary:
    name: 📋 Release Summary
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release, build-release-artifacts, update-changelog]
    if: always()

    steps:
      - name: Generate release summary
        run: |
          echo "## 🚀 Release Summary - v${{ needs.prepare-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          prepare_result="${{ needs.prepare-release.result }}"
          release_result="${{ needs.create-github-release.result }}"
          artifacts_result="${{ needs.build-release-artifacts.result }}"
          changelog_result="${{ needs.update-changelog.result }}"

          echo "| Release Stage | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|-------------|" >> $GITHUB_STEP_SUMMARY

          [[ "$prepare_result" == "success" ]] && echo "| 📋 Prepare | ✅ Completed | Version bumped, changelog generated |" >> $GITHUB_STEP_SUMMARY || echo "| 📋 Prepare | ❌ Failed | Release preparation failed |" >> $GITHUB_STEP_SUMMARY
          [[ "$release_result" == "success" ]] && echo "| 📦 GitHub Release | ✅ Completed | Release published |" >> $GITHUB_STEP_SUMMARY || echo "| 📦 GitHub Release | ❌ Failed | Release creation failed |" >> $GITHUB_STEP_SUMMARY
          [[ "$artifacts_result" == "success" ]] && echo "| 🔨 Artifacts | ✅ Completed | Binaries built for multiple platforms |" >> $GITHUB_STEP_SUMMARY || echo "| 🔨 Artifacts | ❌ Failed | Binary builds failed |" >> $GITHUB_STEP_SUMMARY
          [[ "$changelog_result" == "success" ]] && echo "| 📝 Changelog | ✅ Completed | CHANGELOG.md updated |" >> $GITHUB_STEP_SUMMARY || echo "| 📝 Changelog | ❌ Failed | Changelog update failed |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$prepare_result" == "success" && "$release_result" == "success" ]]; then
            echo "✅ **Release v${{ needs.prepare-release.outputs.new_version }} completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Release:** Created with changelog and release notes" >> $GITHUB_STEP_SUMMARY
            echo "- **Binary Artifacts:** Built for Linux, macOS, Windows, and ARM64" >> $GITHUB_STEP_SUMMARY
            echo "- **Documentation:** CHANGELOG.md updated with release notes" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** All Cargo.toml files updated to v${{ needs.prepare-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
            echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Release Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release encountered issues**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the workflow logs for details on what failed." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create release notification
        if: needs.prepare-release.result == 'success' && needs.create-github-release.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🎉 Release v${{ needs.prepare-release.outputs.new_version }} Published',
              body: `
              ## Release Notification

              Goblin Camp v${{ needs.prepare-release.outputs.new_version }} has been successfully released!

              **What's New:**
              - Check the [release notes](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${{ needs.prepare-release.outputs.new_version }}) for details
              - Download binaries for your platform from the [releases page](https://github.com/${context.repo.owner}/${context.repo.repo}/releases)

              **Release Details:**
              - Published: ${new Date().toISOString()}
              - Commit: ${context.sha}
              - Workflow: ${context.workflow}

              **Artifacts Available:**
              - ✅ Linux (x86_64)
              - ✅ macOS (x86_64)
              - ✅ Windows (x86_64)
              - ✅ Linux ARM64 (aarch64)

              ---
              *This is an automated release notification.*
              `,
              labels: ['release', 'announcement']
            })
